import React from 'react';
import { connect } from 'react-redux';
import { bindActionCreators } from 'redux';
import { Prompt } from 'react-router';
import style from 'style';

import Button from 'UI/Button';
import Info from 'UI/Info';
import ButtonControlPane from 'UI/ButtonControlPane';

import Loading from 'Animation/Loading';
import SlideLR from 'Animation/SlideLR';
import SlideRL from 'Animation/SlideRL';
import SlideDU from 'Animation/SlideDU';
import SlideUD from 'Animation/SlideUD';

import UserManagerWindow from "Windows/UserManager";

import {
  view as SingleSubjectTest,
  actions as SingleSubjectTestActions
} from 'Connected/SingleSubjectTest';

import changeAlpToNum from 'Algorithm/changeAlpToNum';
import decideNextQuestion from 'Algorithm/decideNextQuestion';

import protect from 'HOC/protect';
import asyncProcessControl from 'HOC/asyncProcessControl';
import makePage from 'HOC/makePage';
import applyHOCs from 'HOC/applyHOCs';

class LogicTest extends React.PureComponent {

  constructor( props ){
    super( props );

    this.state = {
      testend: false,
      show: false,
      lock: false
    };

  }


  loadQuestions = () => {
    this.props.loadQuestions({
      url: "http://59.110.23.212/LearningSystem/BackEnd/logic_test.php",
      body: {
        username: this.props.username
      },
      parser: response => {
        function getRightKey( char ){
          char = char.toLowerCase();
          return char.charCodeAt(0) - "a".charCodeAt(0);
        }

        var all = [];
        all.concat( respose.easy );
        all.concat( respose.meddium );
        all.concat( respose.hard );
        return all.map( one => ({
          questionId: one.id,
          options: one.option,
          rightKey: getRightKey( one.answer ),
          question: one.question,
          analysis: one.analysis,
          type: one.type
        }))
      }
    })
  }


  submitQuestions = () => {
    const {
      username,
      questions,
      articleId,
      submitQuestionState,
      submiting,
      lockAndShow
    } = this.props;

    var submitTime = submitQuestionState.resolved;
    if( submiting ){
      return;
    }
    var wrongList = "";
    for( var i = 0 ; i < questions.length ; i++ ){
      if( questions[i].choosed !== questions[i].rightKey ){
        wrongList += `${questions[i].questionId} `;
      }
    }
    this.props.submitQuestions({
      url: "http://59.110.23.212/LearningSystem/BackEnd/record_wrong_question.php",
      body: {
        username: username,
        article_id: articleId,
        wrong_question_ids: wrongList,
        time: submitTime + 1
      }
    });
    if( ( ( submitTime + 1 ) & 1 ) === 0 ){
      for( var i = 0; i < questions.length ; i++ ){
        lockAndShow( questions[i].questionId );
      }
    }
  }

  componentDidMount(){
    this.loadQuestions();
  }


  render(){
    const { testend } = this.state;
    const {
      submitQuestionState,
      loadQuestionState,
      ined,
      questions,
      next,
      forceNext
    } = this.props;

    var show = true;
    return (
      <React.Fragment>
        <Prompt
          when={testend !== true}
          message="you need to do it again, are you sure to quit?"
        />

        <div className={style.wrapper}>
            {  testend ?
                 <Info info="您的各类题型错误率统计如下"/>
                 :
                 <div className={style.question}>
                   <Loading
                      loading={loadQuestionState.pending}
                      wasLoaded={loadQuestionState.resolved}
                      lastFailed={loadQuestionState.lastFailed}
                      reloader={this.loadQuestions}
                      center
                   >
                     <SlideRL play={ined}>
                        <SingleSubjectTest
                          submiter={this.submitQuestions}
                          loader={this.loadQuestions}
                        />
                     </SlideRL>
                  </Loading>
                  {  show ?
                       <Button
                         className={style.nextQuestion}
                         text={"下一题"}
                         onClick={forceNext}
                       />
                       :
                       null
                  }
                </div>
            }
        </div>
      </React.Fragment>
    );
  }
};

export default applyHOCs([

  protect({
    logined: {
      satisfy: l => l === true,
      block: ({ openWindow , history, closeMask , openMask }) => {
        openWindow( UserManagerWindow,
          {
            width: '380px',
            height: '300px',
            position: {
              top: 'calc( 50% - 190px)',
              left: 'calc( 50% - 150px)'
            },
            onCancel: () => history.goBack() || closeMask(),
            onSuccess: closeMask,
          }
        );
        openMask();
      }
    }
  }),
  makePage,
  connect(
    state => ({
      logined: state.UserManager.logined,
      username: state.UserManager.name,
      questions: state.SingleSubjectTest.content,
      loadQuestionState: state.SingleSubjectTest.loadState,
      submitQuestionState: state.SingleSubjectTest.submitState,
      lock: state.SingleSubjectTest.lock,
      show: state.SingleSubjectTest.show
    }),
    dispatch => ({
      ...bindActionCreators( SingleSubjectTestActions , dispatch ),
    })
  )],
  LogicTest
);
