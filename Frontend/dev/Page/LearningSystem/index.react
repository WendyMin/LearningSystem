import React from 'react';
import { connect } from 'react-redux';
import { Prompt } from 'react-router';
import style from 'style';

import EnglishLearning from 'Page/Learning/EnglishLearning';
import LogicLearning from 'Page/Learning/LogicLearning';

import LoginForm from 'UI/LoginForm';
import SignUpForm from 'UI/SignUpForm';

import protect from 'HOC/protect';
import asyncProcessControl from 'HOC/asyncProcessControl';
import makePage from 'HOC/makePage';
import applyHOCs from 'HOC/applyHOCs';

class LearningSystem extends React.PureComponent {

  constructor( props ){
    super( props );

    //this.whetherIntroductionShow = [true,false,false,false];//whetherIntroductionShow[0]:english ; whetherIntroductionShow[1]:logic ;
                                                            //whetherIntroductionShow[2]:write ; whetherIntroductionShow[3]:math ;
    this.subject = ["英语科目" , "逻辑科目" , "写作科目" , "数学科目"];
    this.introduction = ["英语科目简介" , "逻辑科目简介" , "写作科目简介" , "数学科目简介"];
    this.useIntroduction = ["英语学习部分分为测试、学习、复习三个部分" , "逻辑学习部分分为测试、知识点精要、学习、复习四个部分" ,
                            "写作学习部分分为论证有效性分析和论说文两个个部分" , "数学学习部分分为测试、学习、复习三个部分"];

    this.state = {
      englishIntroShow: true,
      logicIntroShow: false,
      writeIntroShow: false,
      mathIntroShow: false,
      loginShow: false,
      signupShow: false
    }

  }

  showIntroduction = (num) => {
    //this.whetherIntroductionShow[num] = true;
    num == 0 ? this.setState({englishIntroShow: true , logicIntroShow: false , writeIntroShow: false , mathIntroShow: false }) :
    num == 1 ? this.setState({englishIntroShow:false , logicIntroShow: true , writeIntroShow: false , mathIntroShow: false }) :
    num == 2 ? this.setState({englishIntroShow:false , logicIntroShow: false , writeIntroShow: true , mathIntroShow: false }) :
    this.setState({englishIntroShow: false , logicIntroShow: false , writeIntroShow: false ,  mathIntroShow: true})
  }

  render(){
    //var i = 0;
    //var TextStyle = [];
    //for (var i = 0 ; i < this.whetherIntroductionShow.length ; i++){
    //  if(this.whetherIntroductionShow[i]){
      //  TextStyle[i] = style.chosedText;
      //}
      //else{
      //  TextStyle[i] = style.normalText;
    //}
  //  }
   var TextStyle = [];
   this.state.englishIntroShow ? TextStyle[0] = style.chosedText : TextStyle[0] = style.normalText;
   this.state.logicIntroShow ? TextStyle[1] = style.chosedText : TextStyle[1] = style.normalText;
   this.state.writeIntroShow ? TextStyle[2] = style.chosedText : TextStyle[2] = style.normalText;
   this.state.mathIntroShow ? TextStyle[3] = style.chosedText : TextStyle[3] = style.normalText;

    return (
      <React.Fragment>
        <div className = {style.wholePage}>

          <div className={style.HUD}>
            <div className={style.sysTitle}> 学习系统 </div>
            <div className={style.loginOrSignup}
              >
              <a onClick = {() => this.setState({loginShow: true , signupShow: false})}
              //href = "/learningsystem"
              ><u> 登录 </u></a> <a>&nbsp;&nbsp;&nbsp;</a>
              <a //href = "/login"
              onClick = {() => this.setState({loginShow: false , signupShow: true})}
              ><u> 注册 </u></a>
            </div>
          </div>

          <div className = {style.subjectText}>
            <ul>
              {this.subject.map((sub , key) =>
                <li key = {key} className = {TextStyle[key]}
                    onMouseMove = { () => this.showIntroduction(key) }
                    onClick = { () => this.showIntroduction(key) }
                >{sub}</li>
              )}
            </ul>
          </div>

              {/*this.whetherIntroductionShow.map((whetherShow , key) =>
                {if(whetherShow){
                  return(<div key = {key} className = {style.subjectIntroduction}>
                  <div className = {style.title}>{this.introduction[0]}</div>
                  <div className = {style.brifIntroduction}>{this.useIntroduction[0]}</div>
                  </div>)
                }} )
              */}
          {
            this.state.englishIntroShow ?
            <div className = {style.subjectIntroduction}>
              <div className = {style.title}>{this.introduction[0]}</div><br/>
              <div className = {style.brifIntroduction}>{this.useIntroduction[0]}</div><br/>
              <a href = "/learning/english">开始英语学习</a>
            </div>
           :
           this.state.logicIntroShow ?
           <div className = {style.subjectIntroduction}>
             <div className = {style.title}>{this.introduction[1]}</div><br/>
             <div className = {style.brifIntroduction}>{this.useIntroduction[1]}</div><br/>
             <a href = "/learning/logic">开始逻辑学习</a>
          </div>
          :
          this.state.writeIntroShow ?
          <div className = {style.subjectIntroduction}>
            <div className = {style.title}>{this.introduction[2]}</div><br/>
            <div className = {style.brifIntroduction}>{this.useIntroduction[2]}</div><br/>
            <a href = "/learning/writing">开始写作学习</a>
         </div>
         :
         <div className = {style.subjectIntroduction}>
           <div className = {style.title}>{this.introduction[3]}</div><br/>
           <div className = {style.brifIntroduction}>{this.useIntroduction[3]}</div><br/>
           <a href = "/learning/math">开始数学学习</a>
        </div>
          }


       {this.state.loginShow?
         <div className = {style.login}><LoginForm/></div>:
         null
       }
       {this.state.signupShow?
         <div className = {style.login}><SignUpForm/></div>:
         null
       }


        </div>
      </React.Fragment>
    );
  }
};

export default applyHOCs([
  asyncProcessControl({
  }),
  protect({
    logined: {
      satisfy: l => l === true,
      block: ({ openWindow , history, closeMask , openMask }) => {
        openWindow( UserManagerWindow,
          {
            width: '380px',
            height: '300px',
            position: {
              top: 'calc( 50% - 190px)',
              left: 'calc( 50% - 150px)'
            },
            onCancel: () => history.goBack() || closeMask(),
            onSuccess: closeMask,
          }
        );
        openMask();
      }
    }
  }),
  makePage,
  connect(
    state => ({
      logined: state.UserManager.logined,
      username: state.UserManager.name,
    }),
    dispatch => ({
      //...bindActionCreators( ButtonExpandActions , dispatch),
    })
  )],
  LearningSystem
);
