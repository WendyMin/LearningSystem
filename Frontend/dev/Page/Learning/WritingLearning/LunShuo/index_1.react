import React from 'react';
import { connect } from 'react-redux';
import { bindActionCreators } from 'redux';
import { Prompt } from 'react-router';
import style from 'style';

import Button from 'UI/Button';
import Info from 'UI/Info';
import MultQuestion from 'UI/MultQuestion';

import Loading from 'Animation/Loading';
import SlideLR from 'Animation/SlideLR';
import SlideRL from 'Animation/SlideRL';
import SlideDU from 'Animation/SlideDU';
import SlideUD from 'Animation/SlideUD';

import UserManagerWindow from "Windows/UserManager";

import {
  view as ButtonExpand,
  actions as ButtonExpandActions
} from 'Connected/ButtonExpand';
import {
  view as WriteContent,
  actions as WriteContentActions
} from 'Connected/WriteContent';
import {
  view as MultOptionQuestons,
  actions as MultOptionQuestionsActions
} from 'Connected/MultOptionQuestions';

import protect from 'HOC/protect';
import asyncProcessControl from 'HOC/asyncProcessControl';
import makePage from 'HOC/makePage';
import applyHOCs from 'HOC/applyHOCs';

class LunShuo extends React.PureComponent {

  constructor( props ){
    super( props );

    this.state = {
      processStep: 0,
      jiqiaoDisplay: false,  //代表点击写作技巧精讲之后，对应的按钮块是否显示
      zhaocuoDisplay: false, //代表点击写作技巧精讲的某一大类之后，对应的小类按钮块是否显示
      gongguDisplay: false,  //代表点击巩固强化练习之后，对应的按钮块是否显示
      zhentiDisplay: false,  //代表点击真题演练之后，对应的按钮块是否显示
      titleContentDisplay: false,   //代表点击最后一级按钮之后，页面是否显示中间题目部分
      optionContentDisplay: false,  //代表点击最后一级按钮之后，页面是否显示右边选项部分
      acknowledgeDisplay: false,    //代表点击最后一级按钮之后，页面不需要划分成题目和选项
      daleiName: ""
    };

  }

/**
 * 点击写作技巧精讲按钮之后改变值
 */
  jiqiao = () => {
    this.setState({
      jiqiaoDisplay: !this.state.jiqiaoDisplay,
      zhaocuoDisplay: false,
      gongguDisplay: false,
      zhentiDisplay: false
    })
  }

  /**
   * 大类按钮展开 的小类按钮中的内容
   */
  loadButtonContents_xiaolei = ( dalei ) => {
    this.setState({
      zhaocuoDisplay: true,
      gongguDisplay: false,
      zhentiDisplay: false,
      daleiName: dalei
    });
    this.props.loadButtonContents({
      url: "http://139.129.210.230/LearningSystem/BackEnd/lunshuo_xiaolei.php",
      body: {
        requestXiaolei: dalei
      }
    });
  }

/**
 * 巩固强化练习按钮展开的内容
 */
  loadButtonContents_gonggu = () => {
    this.setState({
      jiqiaoDisplay: false,
      zhaocuoDisplay: false,
      gongguDisplay: !this.state.gongguDisplay,
      zhentiDisplay: false
    });
    this.props.loadButtonContents({
        url: "http://139.129.210.230/LearningSystem/BackEnd/lunzheng_gonggu.php"
      });
  }

/**
 * 近年真题演练按钮展开的内容
 */
  loadButtonContents_zhenti = () => {
    this.setState({
      jiqiaoDisplay: false,
      zhaocuoDisplay: false,
      gongguDisplay: false,
      zhentiDisplay: !this.state.zhentiDisplay
    });
    this.props.loadButtonContents({
        url: "http://139.129.210.230/LearningSystem/BackEnd/lunzheng_zhenti.php"
      });
  }

/**
 * 加载对应点击按钮的内容
 */
  loadZhentiContent = ( choice ) => {
    this.setState({
      zhentiDisplay: false ,
      titleContentDisplay: true ,
      optionContentDisplay: true,
      acknowledgeDisplay: false
   });
    this.props.loadWriteContents({
      url: "http://139.129.210.230/LearningSystem/BackEnd/lunzheng_zhenti_content.php",
      body: {
        requestQuestion: choice
      }
    });
  }

  loadGongguContent = ( choice ) => {
    this.setState({
      gongguDisplay: false,
      titleContentDisplay: true ,
      optionContentDisplay: true,
      acknowledgeDisplay: false
   });
    this.props.loadWriteContents({
      url: "http://139.129.210.230/LearningSystem/BackEnd/lunzheng_gonggu_content.php",
      body: {
        requestQuestion: choice
      }
    });
  }

  loadZhaocuoContent = ( choice ) => {
    this.setState({
      zhaocuoDisplay: false,
      jiqiaoDisplay: false,
      titleContentDisplay: false ,
      optionContentDisplay: false,
      acknowledgeDisplay: true
   });
    this.props.loadWriteContents({
      url: "http://139.129.210.230/LearningSystem/BackEnd/lunshuo_xiaolei_content.php",
      body: {
        //dalei: "素材宝典",
        dalei: this.state.daleiName,
        xiaolei: choice
      }
    });
  }


  render(){
    const {
      processStep,
      jiqiaoDisplay,
      zhaocuoDisplay,
      gongguDisplay,
      zhentiDisplay,
      titleContentDisplay,
      optionContentDisplay,
      acknowledgeDisplay
     } = this.state;

    const {
      loadButtonContentsState,
      loadWriteContentsState,
      ined,
      choice,
      showContent,
      mainContent
    } = this.props;
    console.log(mainContent)


    return (
      <React.Fragment>
        <Prompt
          when={processStep !== 0 && processStep !== this.actions.length - 1}
          message="you need to do it again, are you sure to quit?"
        />

        <div className={style.HUD}>
          论说文
        </div>

        <div className={style.wrapper}>

          <div className={style.leftPane}>
            <Button className={style.button1} text={"写作技巧精讲"} onClick={this.jiqiao} /><br/>
            <Button className={style.button2} text={"巩固强化练习"} onClick={this.loadButtonContents_gonggu}/><br/>
            <Button className={style.button3} text={"近年真题演练"} onClick={this.loadButtonContents_zhenti} />
            <Button className={style.button4} text={"数据统计"} />
          </div>

          <div className={style.rightPane}>
            {
               this.state.jiqiaoDisplay?
                 <div className={style.jiqiao}>
                    <Button className={style.buttonjiqiao} text={"题型突破"} onClick={()=>this.loadButtonContents_xiaolei("题型突破")} /><br/>
                    <Button className={style.buttonjiqiao} text={"审题立意"} onClick={()=>this.loadButtonContents_xiaolei("审题立意")} /><br/>
                    <Button className={style.buttonjiqiao} text={"经典模板"} onClick={()=>this.loadButtonContents_xiaolei("经典模板")} /><br/>
                    <Button className={style.buttonjiqiao} text={"画龙点睛"} onClick={()=>this.loadButtonContents_xiaolei("画龙点睛")} /><br/>
                    <Button className={style.buttonjiqiao} text={"素材宝典"} onClick={()=>this.loadButtonContents_xiaolei("素材宝典")} />
                 </div>
              :
              null
           }
           {
              this.state.zhaocuoDisplay?
                <div className={style.zhaocuo}>
                   <ButtonExpand
                    loader={this.loadButtonContents}
                    requestData = { this.loadZhaocuoContent }
                   />
                </div>
              :
              null
           }

           {
             this.state.gongguDisplay?
               <div className={style.gonggu}>
                 <ButtonExpand
                 loader={this.loadButtonContents}
                 requestData = { this.loadGongguContent }
                 />
               </div>
               :
               null
           }
           {
             this.state.zhentiDisplay?
               <div className={style.zhenti}>
                 <ButtonExpand
                 loader={this.loadButtonContents}
                 requestData = { this.loadZhentiContent }
                 />
               </div>
               :
               null
           }



            {
              titleContentDisplay?
                <div className={style.title}>
                  <div className={style.biaoti}>{choice}</div>
                  <WriteContent className={style.content}  loader={this.loadWriteContents}/>
                </div>
              :
              null
            }



              {
                optionContentDisplay?
                <div className={style.option}>
                  <MultOptionQuestons/>
                </div>
                :
                null

              }


          {acknowledgeDisplay?
            <div className={style.content}><br/><br/>
            {/*<Loading
              loading={loadWriteContents.pending}
              wasLoaded={loadWriteContentsState.resolved}
              lastFailed={loadWriteContentsState.lastFailed}
              reloader={this.loadWriteContents}
              center
            >*/}
              <SlideRL play={ined}>
              {Object.entries(mainContent).map(([ para , onepara]) =>
                <div className={style.oneParagrah} key={para}>
                  <p> &nbsp;&nbsp;&nbsp;&nbsp;{onepara} </p><br/>
                </div>
            )}
            </SlideRL>
          {/*</Loading>*/}

            </div>

         :
          null}







          </div>

       </div>


    </React.Fragment>
    )
  }
}

export default applyHOCs([

  protect({
    logined: {
      satisfy: l => l === true,
      block: ({ openWindow , history, closeMask , openMask }) => {
        openWindow( UserManagerWindow,
          {
            width: '380px',
            height: '300px',
            position: {
              top: 'calc( 50% - 190px)',
              left: 'calc( 50% - 150px)'
            },
            onCancel: () => history.goBack() || closeMask(),
            onSuccess: closeMask,
          }
        );
        openMask();
      }
    }
  }),
  makePage,
  connect(
    state => ({
      logined: state.UserManager.logined,
      username: state.UserManager.name,
      buttonTexts: state.ButtonExpand.content,
      loadButtonContentsState: state.ButtonExpand.loadState,
      choice: state.ButtonExpand.choice,
      mainContent: state.WriteContent.content,
      loadWriteContentsState: state.WriteContent.loadState,
      showContent: state.ButtonExpand.showContent,
    }),
    dispatch => ({
      ...bindActionCreators( ButtonExpandActions , dispatch ),
      ...bindActionCreators( WriteContentActions , dispatch )
    })

  )],
  LunShuo
);
